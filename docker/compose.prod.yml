services:
  dashlab-prod:
    image: 376129839585.dkr.ecr.eu-west-3.amazonaws.com/dashlab:${IMAGE_TAG}
    env_file: ".env"
    environment:
      PYTHONPATH: /usr/src/app/src
      DASH_ENV: production
      DASH_DEBUG: "false"
    ports:
      - "7777:7777"
    restart: always
    networks:
      - dashnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7777/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  splitbox-api-prod:
    container_name: splitbox-api-container
    image: pgalmiche0/splitbox-api-prod:latest
    environment:
      - PYTHONPATH=/usr/src/app/src
    ports:
      - 8888:8888
    networks:
      - dashnet
    command: >
      gunicorn -k uvicorn.workers.UvicornWorker splitbox_api:app
      -b 0.0.0.0:8888 --workers 2
    env_file:
      - ".env"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'python3 -c ''import urllib.request; urllib.request.urlopen("http://localhost:8888/health")''',
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  mongo:
    image: mongo:latest # Official MongoDB image
    container_name: mongo_db
    restart: always
    env_file:
      - ".env"
    ports:
      - "27017:27017" # Expose MongoDB default port
    volumes:
      - mongo_data:/data/db
    networks:
      - dashnet
    command: ["mongod", "--quiet"]

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - dashnet

networks:
  dashnet:

volumes:
  caddy_data:
  caddy_config:
  mongo_data:
    labels:
      project: dashlab
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./mongo_data
